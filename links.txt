Advanced Python
Cyber Protection Brigade -- Ft. Gordon
May 14, 2017
=================

Taught by:  Raymond Hettinger
            python@rcn.com               <== overstuffed email
            rachel.hettinger@gmail.com   <== reliable email
            @raymondh

Suggested readings:
-------------------
* http://nbviewer.jupyter.org/url/norvig.com/ipython/Probability.ipynb
* http://norvig.com/lispy.html
* http://norvig.com/lispy2.html
* http://norvig.com/spell-correct.html
* http://www.cameronius.com/research/mcts/about/index.html


Code to Study:
--------------
bottle          (microwebframework)
dexml           (xml orm)
peewee          (database orm)
collections     (regular module in the standard library)


Course evaluations:
    http://www.metricsthatmatter.com/student/evaluation.asp?k=16324&i=ILT00419454

This file:
~/links.txt

Download tool:
~/download.py

Writing assignments:
 ~/writing_assignment.txt

Course Objectives:
==================

* Develop skills with Python's most advanced tools:
    descriptors, decorators, metaclasses, optimizations,
    custom string formatting, specialized containers, namedtuples
    Python internals, and new-style classes.

* Form an understanding of Python's mechanics with an aim to being
  able to understand what any piece of code is doing

* Learn Pythonic code styles and API design with an aim to being
  able to use the language effectively.


===================================================
How to Cythonize a file
---------------------------------------------------

1. Start with working Python code such as bitarray.py
2. Copy the py file to a pyx such as cbitarray.pyx
3. Add type annotations:
      int             <-- For parameters that need to be unboxed
      cdef int        <-- The internal variables that are never boxed
4. Create a setup file such as cbitarray_setup.py
      from Cython.Distutils import build_ext
         ...
      cmdclass = {'build_ext': build_ext},
      ext_modules = [Extension("cbitarray", ["cbitarray.pyx"])]
5. Install it:
      python cbitarray_setup.py install
6. Load it:
      $ python
      >>> import cbitarray
      >>> ba = cbitarray.BitArray(50)

Files:
~/bitarray.py
~/cbitarray.pyx
~/cbitarray_setup.py
~/cbitarray.c

 ~/sumpoly.pyx
 ~/sumpoly.c
 ~/sumpoly_cython_setup.py


=======================================================
Numba -- Adds decorator that compiles to the CPU or GPU
-------------------------------------------------------

1. Install Anaconda:
   http://continuum.io/downloads

2. Add it to your path:
   export PATH=~/anaconda/bin:$PATH

3. Add the numba jit decorator to your code:
   import numba
   ...
   @numba.jit('i8(i8)')

4. Run it at C Speed:

   $ python
   >>> from numba_demo import sum_poly
   >>> sum_poly(123)

Files:
 ~/numba_demo.py


====================================================
How to write C Extensions
----------------------------------------------------

# Example of building your own C extension directly
files:
 ~/demo.c
 ~/demo_setup.py

To install the demo.c file:
        $ python demo_setup.py install
        $ python
        >>> import demo
        >>> demo.collatz(5)
        16
        >>> help(demo)

# Example of how to wrap an C existing file
Files:
 ~/mytools.c
 ~/mytools_wrapper.c
 ~/mytools_setup.py

To install:
        $ python mytools_setup.py install
        $ python
        >>> import mytools
        >>> mytools.count_vowels('hello')
        2


====================================================================
How to wrap code using SWIG
--------------------------------------------------------------------
0. Get SWIG from the downloads at http://swig.org
1. Start with an existing C file such as mytools.c
   that knows nothing about python.
2. Create a project.i describing the function signatures
3. Build wrappers:
   $ swig -python project.i
   The generated output is project.py and project_wrap.c
4. Construct setup file such as project_setup:
   ext_modules = [Extension('_project', sources = ['mytools.c', 'project_wrap.c'])])
5. python project_setup.py install
6. Run it:
      $ python
      >>> import project
      >>> project.collatz(3)

Files:

 ~/project_setup.py
 ~/project.i
 ~/project.py
 ~/project_wrap.c


====================================================================
How configure and use the logging module
--------------------------------------------------------------------

Basic configuration options:
    filename (filename)
    stream   (a currently open file)
    level    (logging.INFO or  DEBUG WARN ERROR CRITICAL)
    format   (format of the logging message)
        %(levelname)s  %(levelno)s
        %(modules)s    %(lineno)s
        %(asctime)s   %(created)s

import logging

logging.basicConfig(
    filename = 'sj_class.log',
    level = logging.INFO,
    format = 'We got a %(levelname)s message at %(asctime): %(message)'
)
logging.info('Finished task %s', 'X')


====================================================================
Resources and Suggested Readings
--------------------------------------------------------------------
* http://www.clemesha.org/blog/modern-python-hacker-tools-virtualenv-fabric-pip/
* http://www.youlikeprogramming.com/2012/03/examples-reading-excel-xls-documents-using-pythons-xlrd/
* http://pravin.insanitybegins.com/posts/writing-a-spider-in-10-mins-using-scrapy
* http://pymotw.com/2/py-modindex.html
* http://www.swig.org/tutorial.html
* http://docs.python-requests.org/en/latest/index.html
* http://pyvideo.org/category/33/pycon-us-2013
* http://zguide.zeromq.org
* http://jessenoller.com/blog/2009/02/05/ssh-programming-with-paramiko-completely-different
* http://www.youtube.com/watch?v=AYjPIMe0BhA   # Richard Jone Web Framework Shootout
* http://www.extremetech.com/extreme/188776-how-l1-and-l2-cpu-caches-work-and-why-theyre-an-essential-part-of-modern-chips
* http://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html

====================================================================
Useful Links:
--------------------------------------------------------------------
    http://txt2re.com/           Builds regular expressions from examples
    http://en.wikipedia.org/wiki/Open/closed_principle
    http://golubenco.org/2009/09/19/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed/
    http://packages.python.org/dexml/


====================================================================
Daily Logs
--------------------------------------------------------------------

~/welcome.tpl
~/play.yaml
~/parser.json
~/gagnum.css
~/family.tpl
~/steps.py
~/instrument.py
~/bloomfilter.py
~/words.pickle
~/spell_check.py
~/test.out
~/threading_demo.py
~/threading_demo_fuzzing.py
~/day3.py
~/multiprocessing_demo.py
~/kmeans.py
~/download.py
~/links.txt
~/day4.py
~/iterator_school.py
~/grouping_demo.py
~/decorator_school.py
~/day5.py
~/day1.py
~/day2.py
~/distance.py
~/cbitarray_setup.py
~/params.py
~/how_map_works.py
~/k_nearest.py
~/multiple_inheritance.py
~/study_irises.py
~/bitarray.py
~/dataclass_demo.py
~/day5_37.py
~/day5sandbox.py
~/language_classifier.py
~/cbitarray.pyx
~/cbitarray.c
~/hello.txt
~/Untitled.ipynb
~/resources.py
~/day5d.py


====================================================================
Presentations and Slides
--------------------------------------------------------------------
$/descriptors.pdf
$/FunWithNewerTools.pdf
$/CoreContainers.pdf
$/ArtOfSubclassing.pdf
$/unicode.pdf
$/using-gdb-pdb.pdf


====================================================================
Class Files
--------------------------------------------------------------------

 /Grammar
 /attrdict.py
 /bitarray.py
 /bloomfilter.py
 /chainmap.py
 /custom_formatting.py
 /day1.py
 /day2.py
 /day3.py
 /day3_chainmap.py
 /dots_vs_brackets.py
 /download.py
 /how_map_works.py
 /instrument.py
 /list_demo.py
 /module_demo.py
 /multiprocessing_demo.py
 /puzzle.py
 /review.py
 /sets_from_scratch.py
 /spell_check.py
 
 /descriptors_scratch.py
 /setup.py
 /requirements.txt
 /day4.py
 /day4c.py
 /language_classifier.py
 /links.txt
 /metaclass_demo.py

=====================================================
Sample Data
-----------------------------------------------------
$/hamlet.txt
$/the_great_gatsby.txt
$/words.txt
$/CSDMC2010_SPAM.zip
$/big.txt
$/beautifulsoup4-4.1.0.tar.gz
$/proverbs_en.txt
$/proverbs_es.txt
$/proverbs_de.txt
$/proverbs_fr.txt
$/proverbs_it.txt

$/ps_favicon.ico
$/bottle.py

$/happy.csv
$/IRIS_SETOSA.jpeg
$/IRIS_VERSICOLOR.jpeg
$/IRIS_VIRGINICA.jpeg
$/iris_data.csv
$/irises.db
$/congress_data.zip

===========================================
How to automatically generate documentation
-------------------------------------------

    $ python -m pydoc -w regular_class


===========================================
How to make a case insensitive dicitonary
-------------------------------------------

    class CIdict(dict):
    'Case insensitive dictionary'
    # note that dict.get() is unaffected
    # because of the Open-Closed Principle

    def __setitem__(self, key, value):
        key = key.lower()
        dict.__setitem__(self, key, value)

    def __getitem__(self, key):
        key = key.lower()
        return dict.__getitem__(self, key)


====================================================================
Getting Set up Cython, Pip, and VirtualEnv
--------------------------------------------------------------------

    Starting point is working C compiler and build environment:
        (ubuntu) apt-get install python-dev
        (mac) AppStore and install XCode
              Start Preferences:  Goto Downloads:  Install command-line tools

    How to make a pyx:
        copied bitarray.py cbitarray.pyx and then add annotations (int, str)

    Building a pyx is done with setup.py:
        cython cbitarray.pyx -> cbitarray.c -> cbitarray.o -> install .so to site-packages

    $ python distribute_setup.py
    $ python get-pip.py
    $ pip install virtualenv
    $ virtualenv myproj
    $ source myproj/bin/activate
    (myproj) $ pip install cython
    (myproj) $ python cbitarray_setup.py install
    (myproj) $ python
    >>> import cbitarray
    >>> ^D
    (myproj) $ deactivate
    $


====================================================================
Misc Notes
--------------------------------------------------------------------

How to make an iterator out of a function:
------------------------------------------
    f = open('tmp.dat')
    for block in iter(partial(f.read, 10), ''):
    print block

Ways to make a callable:
------------------------

    def f(x):
         return x*x
    f = lambda x: x*x
    f = functools.partial(pow, 2)
    f = str.lower                       # unbound method
    f = d.bark                          # bound method
    f = operator.itemgetter(2,5)        # lambda r: (r[2], r[5])
    f = operator.attrgetter('x', 'y')   # lambda r: (r.x, r.y)
    class ItemGetter:
    def __init__(self, x):
             self.x = x
    def __call__(self, r):
         return r[self.x]

Important special methods:
--------------------------

    d[k]      __getitem__
                   ^------->    __missing__ or KeyError
    d[k]=v    __setitem__
    del d[k]  __delitem__


    a.m       __getattribute__
                    ^------>    __getattr__ or AttributeError
    a.m = x   __setattr__
    del a.m   __delattr__


To make a fresh copy of Python (different from the one on your system):
-----------------------------------------------------------------------

    1. Download the tarball:
        http://www.python.org/ftp/python/2.7.14/Python-2.7.14.tgz
    2. $ tar xzvf
    3. $ ./configure --prefix=~/mynewpy
    4. $ make
    5. $ ./python.exe

Argument Packing and Unpacking:
-------------------------------

    Positional:
        f(a, b, *t)           # Unpacks tuple t into separate positional arguments
        def f(a, b, *t):...   # Packs variable length args into a tuple

Keywords:
        f(a, b, **d)          # Unpacks dict d into separate keyword arguments
        def f(a, b, **kwds)   # Packs keywords args into a dictionary

Accessing attributes whose name is known only by a string or variable:
----------------------------------------------------------------------
    a.x      <==>   getattr(a, 'x')
    a.x=10   <==>   setattr(a, 'x', 10)
    del a.x  <==>   delattr(a, 'x')

Techniques for using lambda:
----------------------------

    Create anonymous in-line functions
    ----------------------------------
    100 + (lambda x, y:  3*x+y)(10, 20)

    Trap global variables in a default argument
    -------------------------------------------
    w = Window('Debugger output')
    for action in 'run shoot hide communicate surrender'.split():
        b = Button(parent=w, callback=lambda action=action.upper(): do(action))

    Delayed evaluation (promises, thunks, freeze/thaw):
    ---------------------------------------------------
    f = lambda : 2 ** 200 - 1      # prepare to do calculation
    f()                            # now do the work

How to install pip:
-------------------

 http://python-distribute.org/distribute_setup.py
 http://raw.github.com/pypa/pip/master/contrib/get-pip.py

    $ python distribute_setup.py
    $ python get-pip.py

How to install virtualEnv:
--------------------------

    http://pypi.python.org/pypi/virtualenv

    $ pip install virtualenv
    $ virtualenv myproj
    $ source myproj/bin/activate
    (myproj) $ pip install requests
    (myproj) $ python
    >>> import requests
    >>> ^D
    (myproj) $ deactivate
    $ # back to normal


How to get a C compiler for Mac OS/X:
-------------------------------------
In case the XCode tools aren't being found on the Mac,
teach Mac OS X Lion where to the finder dev tools,
by adding the following to the .bashrc or .bash_profile:

    export PATH=/Developer/usr/bin:${PATH}

AI Examples (unused):
---------------------
 !/ai/eight_queens.py
 !/ai/sudoku.py
 !/ai/puzzle.py
 !/ai/alphametics.py
 !/ai/neural_net.py
 !/ai/jets.txt
 $/AI.pdf


==============================================================================
Using Cython on Windows
-----------------------------------------------------------------------------
1- download the right cython package for your python from here:

   http://www.lfd.uci.edu/~gohlke/pythonlibs/#cython

2- You may need to create this file: <HOME>\pydistutils.cfg with this contents:

   [build_ext]
   compiler=mingw32

2.1 : This is how to find your home dir:

    >>> import os
    >>> os.path.expanduser('~')

3. Building a Cython module using distutils

Imagine a simple “hello world” script in a file hello.pyx:

    def say_hello_to(name):
        print("Hello %s!" % name)

The following could be a corresponding setup.py script:

   from distutils.core import setup
   from distutils.extension import Extension
   from Cython.Distutils import build_ext

   ext_modules = [Extension("hello", ["hello.pyx"])]

   setup(
      name = 'Hello world app',
      cmdclass = {'build_ext': build_ext},
      ext_modules = ext_modules
   )

To build, run:

   $ python setup.py build_ext --inplace

   (add  --compiler= mingw32 if compiler could not be found)


Then simply start a Python session and do from hello import say_hello_to and use
the imported function as you see fit.

Build your own Python:
----------------------

    Download the tar file:  http://www.python.org/ftp/python/2.7.14/Python-2.7.14.tgz
    Untar the file:  tar -xzfv
    $ ./configure
    $ make
    $ ./python.exe --version
